// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type BuySingleDomainForbiddenType string

const (
	BuySingleDomainForbiddenTypeNotAuthorizedForScopeError BuySingleDomainForbiddenType = "NotAuthorizedForScope_error"
	BuySingleDomainForbiddenTypeForbiddenError             BuySingleDomainForbiddenType = "Forbidden_error"
)

// BuySingleDomainForbidden - NotAuthorizedForScope
type BuySingleDomainForbidden struct {
	NotAuthorizedForScopeError *NotAuthorizedForScopeError `queryParam:"inline"`
	ForbiddenError             *ForbiddenError             `queryParam:"inline"`

	Type BuySingleDomainForbiddenType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &BuySingleDomainForbidden{}

func CreateBuySingleDomainForbiddenNotAuthorizedForScopeError(notAuthorizedForScopeError NotAuthorizedForScopeError) BuySingleDomainForbidden {
	typ := BuySingleDomainForbiddenTypeNotAuthorizedForScopeError

	return BuySingleDomainForbidden{
		NotAuthorizedForScopeError: &notAuthorizedForScopeError,
		Type:                       typ,
	}
}

func CreateBuySingleDomainForbiddenForbiddenError(forbiddenError ForbiddenError) BuySingleDomainForbidden {
	typ := BuySingleDomainForbiddenTypeForbiddenError

	return BuySingleDomainForbidden{
		ForbiddenError: &forbiddenError,
		Type:           typ,
	}
}

func (u *BuySingleDomainForbidden) UnmarshalJSON(data []byte) error {

	var notAuthorizedForScopeError NotAuthorizedForScopeError = NotAuthorizedForScopeError{}
	if err := utils.UnmarshalJSON(data, &notAuthorizedForScopeError, "", true, nil); err == nil {
		u.NotAuthorizedForScopeError = &notAuthorizedForScopeError
		u.Type = BuySingleDomainForbiddenTypeNotAuthorizedForScopeError
		return nil
	}

	var forbiddenError ForbiddenError = ForbiddenError{}
	if err := utils.UnmarshalJSON(data, &forbiddenError, "", true, nil); err == nil {
		u.ForbiddenError = &forbiddenError
		u.Type = BuySingleDomainForbiddenTypeForbiddenError
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BuySingleDomainForbidden", string(data))
}

func (u BuySingleDomainForbidden) MarshalJSON() ([]byte, error) {
	if u.NotAuthorizedForScopeError != nil {
		return utils.MarshalJSON(u.NotAuthorizedForScopeError, "", true)
	}

	if u.ForbiddenError != nil {
		return utils.MarshalJSON(u.ForbiddenError, "", true)
	}

	return nil, errors.New("could not marshal union type BuySingleDomainForbidden: all fields are null")
}

func (u BuySingleDomainForbidden) Error() string {
	switch u.Type {
	case BuySingleDomainForbiddenTypeNotAuthorizedForScopeError:
		data, _ := json.Marshal(u.NotAuthorizedForScopeError)
		return string(data)
	case BuySingleDomainForbiddenTypeForbiddenError:
		data, _ := json.Marshal(u.ForbiddenError)
		return string(data)
	default:
		return "unknown error"
	}
}
