// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateDomainNameserversForbiddenType string

const (
	UpdateDomainNameserversForbiddenTypeNotAuthorizedForScopeError UpdateDomainNameserversForbiddenType = "NotAuthorizedForScope_error"
	UpdateDomainNameserversForbiddenTypeForbiddenError             UpdateDomainNameserversForbiddenType = "Forbidden_error"
)

// UpdateDomainNameserversForbidden - NotAuthorizedForScope
type UpdateDomainNameserversForbidden struct {
	NotAuthorizedForScopeError *NotAuthorizedForScopeError `queryParam:"inline"`
	ForbiddenError             *ForbiddenError             `queryParam:"inline"`

	Type UpdateDomainNameserversForbiddenType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &UpdateDomainNameserversForbidden{}

func CreateUpdateDomainNameserversForbiddenNotAuthorizedForScopeError(notAuthorizedForScopeError NotAuthorizedForScopeError) UpdateDomainNameserversForbidden {
	typ := UpdateDomainNameserversForbiddenTypeNotAuthorizedForScopeError

	return UpdateDomainNameserversForbidden{
		NotAuthorizedForScopeError: &notAuthorizedForScopeError,
		Type:                       typ,
	}
}

func CreateUpdateDomainNameserversForbiddenForbiddenError(forbiddenError ForbiddenError) UpdateDomainNameserversForbidden {
	typ := UpdateDomainNameserversForbiddenTypeForbiddenError

	return UpdateDomainNameserversForbidden{
		ForbiddenError: &forbiddenError,
		Type:           typ,
	}
}

func (u *UpdateDomainNameserversForbidden) UnmarshalJSON(data []byte) error {

	var notAuthorizedForScopeError NotAuthorizedForScopeError = NotAuthorizedForScopeError{}
	if err := utils.UnmarshalJSON(data, &notAuthorizedForScopeError, "", true, nil); err == nil {
		u.NotAuthorizedForScopeError = &notAuthorizedForScopeError
		u.Type = UpdateDomainNameserversForbiddenTypeNotAuthorizedForScopeError
		return nil
	}

	var forbiddenError ForbiddenError = ForbiddenError{}
	if err := utils.UnmarshalJSON(data, &forbiddenError, "", true, nil); err == nil {
		u.ForbiddenError = &forbiddenError
		u.Type = UpdateDomainNameserversForbiddenTypeForbiddenError
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDomainNameserversForbidden", string(data))
}

func (u UpdateDomainNameserversForbidden) MarshalJSON() ([]byte, error) {
	if u.NotAuthorizedForScopeError != nil {
		return utils.MarshalJSON(u.NotAuthorizedForScopeError, "", true)
	}

	if u.ForbiddenError != nil {
		return utils.MarshalJSON(u.ForbiddenError, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDomainNameserversForbidden: all fields are null")
}

func (u UpdateDomainNameserversForbidden) Error() string {
	switch u.Type {
	case UpdateDomainNameserversForbiddenTypeNotAuthorizedForScopeError:
		data, _ := json.Marshal(u.NotAuthorizedForScopeError)
		return string(data)
	case UpdateDomainNameserversForbiddenTypeForbiddenError:
		data, _ := json.Marshal(u.ForbiddenError)
		return string(data)
	default:
		return "unknown error"
	}
}
