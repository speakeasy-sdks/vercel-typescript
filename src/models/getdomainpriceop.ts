/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetDomainPriceRequest = {
  domain: string;
  years?: string | undefined;
  teamId?: string | undefined;
};

/**
 * Success
 */
export type GetDomainPriceResponseBody = {
  years: number;
  /**
   * The price for purchasing this domain for the given number of years. If null, the domain is not available for purchase for the given number of years.
   */
  purchasePrice: number | null;
  /**
   * The price for renewing this domain for the given number of years. If null, the domain cannot be renewed for the given number of years.
   */
  renewalPrice: number | null;
  /**
   * The price for transferring this domain in for the given number of years. If null, the domain cannot be transferred in for the given number of years.
   */
  transferPrice: number | null;
};

/** @internal */
export const GetDomainPriceRequest$inboundSchema: z.ZodType<
  GetDomainPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  years: z.string().optional(),
  teamId: z.string().optional(),
});

/** @internal */
export type GetDomainPriceRequest$Outbound = {
  domain: string;
  years?: string | undefined;
  teamId?: string | undefined;
};

/** @internal */
export const GetDomainPriceRequest$outboundSchema: z.ZodType<
  GetDomainPriceRequest$Outbound,
  z.ZodTypeDef,
  GetDomainPriceRequest
> = z.object({
  domain: z.string(),
  years: z.string().optional(),
  teamId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainPriceRequest$ {
  /** @deprecated use `GetDomainPriceRequest$inboundSchema` instead. */
  export const inboundSchema = GetDomainPriceRequest$inboundSchema;
  /** @deprecated use `GetDomainPriceRequest$outboundSchema` instead. */
  export const outboundSchema = GetDomainPriceRequest$outboundSchema;
  /** @deprecated use `GetDomainPriceRequest$Outbound` instead. */
  export type Outbound = GetDomainPriceRequest$Outbound;
}

export function getDomainPriceRequestToJSON(
  getDomainPriceRequest: GetDomainPriceRequest,
): string {
  return JSON.stringify(
    GetDomainPriceRequest$outboundSchema.parse(getDomainPriceRequest),
  );
}

export function getDomainPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainPriceRequest' from JSON`,
  );
}

/** @internal */
export const GetDomainPriceResponseBody$inboundSchema: z.ZodType<
  GetDomainPriceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  years: z.number(),
  purchasePrice: z.nullable(z.number()),
  renewalPrice: z.nullable(z.number()),
  transferPrice: z.nullable(z.number()),
});

/** @internal */
export type GetDomainPriceResponseBody$Outbound = {
  years: number;
  purchasePrice: number | null;
  renewalPrice: number | null;
  transferPrice: number | null;
};

/** @internal */
export const GetDomainPriceResponseBody$outboundSchema: z.ZodType<
  GetDomainPriceResponseBody$Outbound,
  z.ZodTypeDef,
  GetDomainPriceResponseBody
> = z.object({
  years: z.number(),
  purchasePrice: z.nullable(z.number()),
  renewalPrice: z.nullable(z.number()),
  transferPrice: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainPriceResponseBody$ {
  /** @deprecated use `GetDomainPriceResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDomainPriceResponseBody$inboundSchema;
  /** @deprecated use `GetDomainPriceResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDomainPriceResponseBody$outboundSchema;
  /** @deprecated use `GetDomainPriceResponseBody$Outbound` instead. */
  export type Outbound = GetDomainPriceResponseBody$Outbound;
}

export function getDomainPriceResponseBodyToJSON(
  getDomainPriceResponseBody: GetDomainPriceResponseBody,
): string {
  return JSON.stringify(
    GetDomainPriceResponseBody$outboundSchema.parse(getDomainPriceResponseBody),
  );
}

export function getDomainPriceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainPriceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainPriceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainPriceResponseBody' from JSON`,
  );
}
